#Normal Calling
import time
def square(list1):
    print("Calculate square of numbers:")
    for n in list:
        time.sleep(0.5)
        print("Square of "+str(n)+"is "+str(n*n))
        
def cube(list1):
    print("Calculate cube of numbers:")
    for n in list:
        time.sleep(0.5)
        print("Cube of "+str(n)+"is "+str(n*n*n))
        
t=time.time()
list = [1,2,3,4,5]
square(list)
cube(list)
print("Time taken"+str(time.time()-t)+"seconds")

#Multithreading

import time
import threading

def square(list1):
    print("Calculate square of numbers:")
    for n in list:
        time.sleep(0.5)
        print("Square of "+str(n)+"is "+str(n*n))
        
def cube(list1):
    print("Calculate cube of numbers:")
    for n in list:
        time.sleep(0.5)
        print("Cube of "+str(n)+"is "+str(n*n*n))
        
t=time.time()
list = [1,2,3,4,5]
print("Main thread is"+threading.main_thread().name)
t1=threading.Thread(target=square, args=(list,))
t2=threading.Thread(target=cube, args=(list,))
t1.start()
t2.start()

t1.join()
t2.join()
print("Time taken"+str(time.time()-t)+"seconds")

#Multiprocessing

import time
import multiprocessing

def square(list1):
    print("Calculate square of numbers:")
    for n in list:
        time.sleep(0.5)
        print("Square of "+str(n)+"is "+str(n*n))
        
def cube(list1):
    print("Calculate cube of numbers:")
    for n in list:
        time.sleep(0.5)
        print("Cube of "+str(n)+"is "+str(n*n*n))
        
t=time.time()
list = [1,2,3,4,5]

p1=multiprocessing.Process(target=square, args=(list,))
p2=multiprocessing.Process(target=cube, args=(list,))
p1.start()
p2.start()

p1.join()
p2.join()
print("Time taken"+str(time.time()-t)+"seconds")
